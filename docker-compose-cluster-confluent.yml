## VERSION 1.0.0 DOCKER-COMPOSE 
version: "3.8"
services:


    kafka1:
        image: wurstmeister/kafka:2.13-2.7.0
        container_name: kafka1
        depends_on:
            - zookeeper
        environment:
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_ADVERTISED_PORT: 9092
            KAFKA_ADVERTISED_HOST_NAME: kafka1
            KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://localhost:19092
            KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://0.0.0.0:19092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
            KAFKA_CREATE_TOPICS: sales-topic:1:1,fraud-topic:1:1,insurance-raw:8:1
            KAFKA_OPTS: -javaagent:/prometheus/jmx_prometheus_javaagent-0.3.1.jar=2080:/prometheus/kafka-0-8-2.yml
        command: [start-kafka.sh]
        expose:
            - "2080"
            - "9092"
        ports:
            - 9092:9092
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ./kafka/prometheus:/prometheus
            - kafka_kafka1:/opt/kafka_2.12-2.2.0/logs
        networks:
            - kafkanet
            - sparknet
            - mongodbnet
    
    
    zookeeper:
        image: confluentinc/cp-zookeeper:5.4.4
        hostname: zookeeper
        container_name: zookeeper
        ports:
            - "2181:2181"
        environment: 
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
            
    broker:
        image: confluentinc/cp-server:5.4.0
        hostname: broker
        container_name: broker
        depends_on:
            - zookeeper
        ports:
            - "9092:9092"
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
            KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
            KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
            CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
            CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
            CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
            CONFLUENT_METRICS_ENABLE: 'true'
            CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
            
    kafka-tools:
        image: confluentinc/cp-kafka:5.4.0
        hostname: kafka-tools
        container_name: kafka-tools
        command: ["tail", "-f", "/dev/null"]
        network_mode: "host"

    schema-registry:
        image: confluentinc/cp-schema-registry:5.4.0
        hostname: schema-registry
        container_name: schema-registry
        depends_on:
            - zookeeper
            - broker
        ports:
            - "8081:8081"
        environment:
            SCHEMA_REGISTRY_HOST_NAME: schema-registry
            SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"
            
            
    control-center:
        image: confluentinc/cp-enterprise-control-center:5.4.0
        hostname: control-center
        container_name: control-center
        depends_on:
            - zookeeper
            - broker
            - schema-registry
        ports:
            - "9021:9021"
        environment:
            CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
            CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
            CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
            CONTROL_CENTER_REPLICATION_FACTOR: 1
            CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
            CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
            CONFLUENT_METRICS_TOPIC_REPLICATION: 1
            PORT: 9021



volumes:
    shared-workspace:
        name: "hadoop-distributed-file-system"
        driver: local
    redis:
    postgres:
    kafka_kafka1:
    kafka_kafka2:
    
    
networks:
    kafkanet:
        name : kafkanet
        driver: bridge
    sparknet:
        name: sparknet
        driver: bridge
    supersetnet:
        name: supersetnet
        driver: bridge
    mongodbnet:
        name: mongodbnet
        driver: bridge
        attachable: true