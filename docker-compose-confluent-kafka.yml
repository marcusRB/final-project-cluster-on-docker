## VERSION 1.0.0 Confluent Standalone DOCKER-COMPOSE envPRO
# - Kafka by Confluent
# - Grafana & Prometheus
########################################
version: "3.8"
services:


    zookeeper:
        image: confluentinc/cp-zookeeper:6.2.0
        hostname: zookeeper
        container_name: zookeeper
        networks: 
            - kafkanet
        ports:
          - "2181:2181"
        environment:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000

    
    broker:
        image: confluentinc/cp-server:6.2.0
        hostname: broker
        container_name: broker
        depends_on:
            - zookeeper
        networks: 
            - kafkanet            
        ports:
            - "9092:9092"
            - "9101:9101"
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
            KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
            KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_JMX_PORT: 9101
            KAFKA_JMX_HOSTNAME: localhost
            KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:28081
            CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
            CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
            CONFLUENT_METRICS_ENABLE: 'true'
            CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
            KAFKA_OPTS: -javaagent:/prometheus/jmx_prometheus_javaagent-0.15.0.jar=2080:/prometheus/kafka-2_0_0.yml

    # Automatically creates required kafka topics if they were not created.
    kafka-create-topics:
        image: confluentinc/cp-kafka:6.2.0
        depends_on:
          - broker
        hostname: kafka-create-topics
        networks: 
            - kafkanet
        command: "bash -c 'echo Waiting for Kafka to be ready... && \
                           cub kafka-ready -b broker:29092 1 20 && \
                           kafka-topics --create --topic ${KAFKA_TOPIC_1} --if-not-exists --zookeeper zookeeper:2181 --partitions 2 --replication-factor 1 && \
                           kafka-topics --create --topic ${KAFKA_TOPIC_2} --if-not-exists --zookeeper zookeeper:2181 --partitions 2 --replication-factor 1 && \
                           kafka-topics --create --topic ${KAFKA_TOPIC_3} --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 && \
                           kafka-topics --create --topic ${KAFKA_TOPIC_4} --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 && \
                           sleep infinity'"
        environment:
          KAFKA_BROKER_ID: ignored
          KAFKA_ZOOKEEPER_CONNECT: ignored


    schema-registry:
        image: confluentinc/cp-schema-registry:6.2.0
        hostname: schema-registry
        container_name: schema-registry
        depends_on:
            - broker
        networks: 
            - kafkanet
        ports:
            - "28081:28081"
        environment:
            SCHEMA_REGISTRY_HOST_NAME: schema-registry
            SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
            SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:28081
    
    connect:
        image: cnfldemos/cp-server-connect-datagen:0.4.0-6.1.0
        hostname: connect
        container_name: connect
        depends_on:
            - broker
            - schema-registry
        networks: 
            - kafkanet
        ports:
            - "8443:8443"
        environment:
            CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
            CONNECT_REST_ADVERTISED_HOST_NAME: connect
            CONNECT_REST_PORT: 8443
            CONNECT_GROUP_ID: compose-connect-group
            CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
            CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
            CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
            CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
            CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
            CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
            CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
            CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
            CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:28081'
            CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
            CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:28081'
            CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
            CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
            # CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
            # #CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
            # CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
            # CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:28081
            # CLASSPATH required due to CC-2422
            CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-6.2.0.jar
            CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
            CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
            CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
            CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    
    control-center:
        image: confluentinc/cp-enterprise-control-center:6.2.0
        hostname: control-center
        container_name: control-center
        depends_on:
            - broker
            - schema-registry
            - connect
            - ksqldb-server
        networks: 
            - kafkanet
        ports:
            - "9021:9021"
        environment:
            CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
            CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8443'
            CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:28088"
            CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:28088"
            CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:28081"
            CONTROL_CENTER_REPLICATION_FACTOR: 1
            CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
            CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
            CONFLUENT_METRICS_TOPIC_REPLICATION: 1
            PORT: 9021
    
    ksqldb-server:
        image: confluentinc/cp-ksqldb-server:6.2.0
        hostname: ksqldb-server
        container_name: ksqldb-server
        depends_on:
            - broker
            - connect
        networks: 
            - kafkanet
        ports:
            - "28088:28088"
        environment:
            KSQL_CONFIG_DIR: "/etc/ksql"
            KSQL_BOOTSTRAP_SERVERS: "broker:29092"
            KSQL_HOST_NAME: ksqldb-server
            KSQL_LISTENERS: "http://0.0.0.0:28088"
            KSQL_CACHE_MAX_BYTES_BUFFERING: 0
            KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:28081"
            KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
            KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
            KSQL_KSQL_CONNECT_URL: "http://connect:8443"
            KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
            KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
            KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
    
    ksqldb-cli:
        image: confluentinc/cp-ksqldb-cli:6.2.0
        container_name: ksqldb-cli
        networks: 
            - kafkanet
        depends_on:
            - broker
            - connect
            - ksqldb-server
        entrypoint: /bin/sh
        tty: true
        
    
    ksql-datagen:
        image: confluentinc/ksqldb-examples:6.2.0
        hostname: ksql-datagen
        container_name: ksql-datagen
        networks: 
            - kafkanet
        depends_on:
            - ksqldb-server
            - broker
            - schema-registry
            - connect
        command: "bash -c 'echo Waiting for Kafka to be ready... && \
                            cub kafka-ready -b broker:29092 1 40 && \
                            echo Waiting for Confluent Schema Registry to be ready... && \
                            cub sr-ready schema-registry 28081 40 && \
                            echo Waiting a few seconds for topic creation to finish... && \
                            sleep 11 && \
                            tail -f /dev/null'"
        environment:
            KSQL_CONFIG_DIR: "/etc/ksql"
            STREAMS_BOOTSTRAP_SERVERS: broker:29092
            STREAMS_SCHEMA_REGISTRY_HOST: schema-registry
            STREAMS_SCHEMA_REGISTRY_PORT: 28081
    
    rest-proxy:
        image: confluentinc/cp-kafka-rest:6.2.0
        depends_on:
            - broker
            - schema-registry
        networks: 
            - kafkanet
        ports:
            - 28082:28082
        hostname: rest-proxy
        container_name: rest-proxy
        environment:
            KAFKA_REST_HOST_NAME: rest-proxy
            KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
            KAFKA_REST_LISTENERS: "http://0.0.0.0:28082"
            KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:28081'

    grafana:
        image: grafana/grafana:7.5.5
        container_name: grafana
        expose:
            - "3000"
        ports:
            - 3000:3000
        environment:
            - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
        volumes:
            - ./grafana/provisioning/:/etc/grafana/provisioning/
            - ./grafana/provisioning/datasources/datasource.js:/etc/extra-config/grafana
        networks:
            - kafkanet
            - mongodbnet

    prometheus:
        image: prom/prometheus:v2.8.1
        container_name: prometheus
        expose:
            - "9090"
        volumes:
            - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
        depends_on:
            - "zookeeper"
            - "kafka1"
            - "kafka2"
        networks:
            - kafkanet


networks:
    kafkanet:
        name : kafkanet
        driver: bridge
    mongodbnet:
        name: mongodbnet
        driver: bridge