{
  "paragraphs": [
    {
      "text": "%pyspark\n\nimport pandas as pd\nimport numpy as np\ndf \u003d pd.DataFrame({\u0027Temperature\u0027: np.random.randint(40,70, 50000)})",
      "user": "anonymous",
      "dateUpdated": "2021-06-28 20:07:03.159",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1624910804983_1033323577",
      "id": "20210628-200644_666763083",
      "dateCreated": "2021-06-28 20:06:44.983",
      "dateStarted": "2021-06-28 20:07:03.183",
      "dateFinished": "2021-06-28 20:07:15.467",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\ndf",
      "user": "anonymous",
      "dateUpdated": "2021-06-28 20:07:20.478",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "       Temperature\n0               56\n1               60\n2               58\n3               45\n4               62\n5               69\n6               41\n7               53\n8               47\n9               42\n10              50\n11              60\n12              43\n13              57\n14              54\n15              53\n16              62\n17              51\n18              45\n19              46\n20              61\n21              57\n22              41\n23              41\n24              53\n25              58\n26              46\n27              43\n28              43\n29              43\n...            ...\n49970           44\n49971           59\n49972           66\n49973           43\n49974           42\n49975           40\n49976           50\n49977           40\n49978           58\n49979           40\n49980           48\n49981           65\n49982           41\n49983           44\n49984           40\n49985           44\n49986           58\n49987           60\n49988           45\n49989           41\n49990           43\n49991           59\n49992           57\n49993           46\n49994           54\n49995           58\n49996           42\n49997           67\n49998           41\n49999           42\n\n[50000 rows x 1 columns]"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1624910823159_83761226",
      "id": "20210628-200703_940547094",
      "dateCreated": "2021-06-28 20:07:03.159",
      "dateStarted": "2021-06-28 20:07:20.498",
      "dateFinished": "2021-06-28 20:07:20.578",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nfrom pyspark.sql import SparkSession\n\nspark \u003d SparkSession.\\\n        builder.\\\n        appName(\"pyspark-notebook\").\\\n        master(\"spark://spark-master:7077\").\\\n        config(\"spark.executor.memory\", \"512m\").\\\n        getOrCreate()",
      "user": "anonymous",
      "dateUpdated": "2021-06-28 20:12:43.826",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1624911021617_-218832479",
      "id": "20210628-201021_2033870965",
      "dateCreated": "2021-06-28 20:10:21.617",
      "dateStarted": "2021-06-28 20:12:43.853",
      "dateFinished": "2021-06-28 20:12:44.472",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nfrom pyspark.sql import SQLContext\nsqlContext \u003d SQLContext(spark)\nspark_df \u003d sqlContext.createDataFrame(df)",
      "user": "anonymous",
      "dateUpdated": "2021-06-28 20:13:09.132",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1624910840478_-644983337",
      "id": "20210628-200720_62052672",
      "dateCreated": "2021-06-28 20:07:20.478",
      "dateStarted": "2021-06-28 20:13:09.149",
      "dateFinished": "2021-06-28 20:13:11.022",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nspark_df",
      "user": "anonymous",
      "dateUpdated": "2021-06-28 20:13:18.505",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "DataFrame[Temperature: bigint]"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1624910950960_-1672610980",
      "id": "20210628-200910_1095376136",
      "dateCreated": "2021-06-28 20:09:10.960",
      "dateStarted": "2021-06-28 20:13:18.526",
      "dateFinished": "2021-06-28 20:13:18.584",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nfrom pyspark.ml.feature import VectorAssembler\nvectorAssembler \u003d VectorAssembler(inputCols \u003d [\u0027Temperature\u0027], outputCol \u003d \u0027Feature\u0027)\nvspark_df \u003d vectorAssembler.transform(spark_df)\n\nvspark_df.show()",
      "user": "anonymous",
      "dateUpdated": "2021-06-28 20:15:04.339",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-----------+-------+\n|Temperature|Feature|\n+-----------+-------+\n|         56| [56.0]|\n|         60| [60.0]|\n|         58| [58.0]|\n|         45| [45.0]|\n|         62| [62.0]|\n|         69| [69.0]|\n|         41| [41.0]|\n|         53| [53.0]|\n|         47| [47.0]|\n|         42| [42.0]|\n|         50| [50.0]|\n|         60| [60.0]|\n|         43| [43.0]|\n|         57| [57.0]|\n|         54| [54.0]|\n|         53| [53.0]|\n|         62| [62.0]|\n|         51| [51.0]|\n|         45| [45.0]|\n|         46| [46.0]|\n+-----------+-------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1624911198505_-1099132273",
      "id": "20210628-201318_1320490565",
      "dateCreated": "2021-06-28 20:13:18.505",
      "dateStarted": "2021-06-28 20:15:04.365",
      "dateFinished": "2021-06-28 20:15:05.927",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nimport matplotlib.pyplot as plt\nfrom pyspark.ml.clustering import KMeans\nfrom pyspark.ml.evaluation import Evaluator",
      "user": "anonymous",
      "dateUpdated": "2021-06-28 20:16:49.533",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1624911304339_-1680690609",
      "id": "20210628-201504_1936812781",
      "dateCreated": "2021-06-28 20:15:04.339",
      "dateStarted": "2021-06-28 20:16:49.552",
      "dateFinished": "2021-06-28 20:16:49.611",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\ncost \u003d np.zeros(20)\nfor k in range(2,20):\n    kmeans \u003d KMeans().setK(k).setSeed(1).setFeaturesCol(\"Feature\")\n    model \u003d kmeans.fit(vspark_df.sample(False,0.1, seed\u003d42))\n    cost[k] \u003d model.computeCost(vspark_df) \n    \nfig, ax \u003d plt.subplots(1,1, figsize \u003d(8,6))\nax.plot(range(2,20),cost[2:20])\nax.set_xlabel(\u0027k\u0027)\nax.set_ylabel(\u0027cost\u0027)",
      "user": "anonymous",
      "dateUpdated": "2021-06-28 20:17:04.913",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Text(0,0.5,u\u0027cost\u0027)\u003cmatplotlib.figure.Figure at 0x7f082a024ed0\u003e\n"
          },
          {
            "type": "IMG",
            "data": "\u003d\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1624911334964_-522514597",
      "id": "20210628-201534_1071699102",
      "dateCreated": "2021-06-28 20:15:34.964",
      "dateStarted": "2021-06-28 20:17:04.934",
      "dateFinished": "2021-06-28 20:17:16.212",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nfrom pyspark.ml.clustering import KMeans\nk \u003d 6\nkmeans \u003d KMeans().setK(k).setSeed(1).setFeaturesCol(\"Feature\")\nmodel \u003d kmeans.fit(vspark_df)\nfrom pyspark.sql.functions import col\ndf_transformed\u003dmodel.transform(vspark_df).select(\u0027Temperature\u0027,\u0027Feature\u0027, col(\u0027prediction\u0027).alias(\u0027label\u0027))\n\ndf_transformed.show(2)",
      "user": "anonymous",
      "dateUpdated": "2021-06-28 20:17:31.197",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-----------+-------+-----+\n|Temperature|Feature|label|\n+-----------+-------+-----+\n|         56| [56.0]|    4|\n|         60| [60.0]|    5|\n+-----------+-------+-----+\nonly showing top 2 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1624911424913_781444917",
      "id": "20210628-201704_1920137128",
      "dateCreated": "2021-06-28 20:17:04.913",
      "dateStarted": "2021-06-28 20:17:31.221",
      "dateFinished": "2021-06-28 20:17:31.980",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nfrom pyspark.ml.classification import MultilayerPerceptronClassifier\nfrom pyspark.ml.evaluation import MulticlassClassificationEvaluator\n\n\n\n# Split the data into train and test\nsplits \u003d df_transformed.randomSplit([0.6, 0.4], 1234)\ntrain \u003d splits[0]\ntest \u003d splits[1]\n\n\nlayers \u003d [1, 6, 8, 6]\n\n\n# create the trainer and set its parameters\ntrainer \u003d MultilayerPerceptronClassifier(featuresCol\u003d\u0027Feature\u0027, labelCol\u003d\u0027label\u0027, maxIter\u003d200, layers\u003dlayers, blockSize\u003d128, seed\u003d1234)\n\n\n# train the model\nmodel_NN \u003d trainer.fit(train)\n\n\n# compute accuracy on the test set\nresult \u003d model_NN.transform(test)\npredictionAndLabels \u003d result.select(\"prediction\", \"label\")\nevaluator \u003d MulticlassClassificationEvaluator(metricName\u003d\"accuracy\")\nprint(\"Test set accuracy \u003d \" + str(evaluator.evaluate(predictionAndLabels)))",
      "user": "anonymous",
      "dateUpdated": "2021-06-28 20:17:57.200",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Test set accuracy \u003d 0.19620221703\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1624911451197_-719352622",
      "id": "20210628-201731_1669297572",
      "dateCreated": "2021-06-28 20:17:31.197",
      "dateStarted": "2021-06-28 20:17:57.231",
      "dateFinished": "2021-06-28 20:18:00.104",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nfrom pyspark.ml.classification import MultilayerPerceptronClassificationModel\nmodel_NN.save(\"model/\")",
      "user": "anonymous",
      "dateUpdated": "2021-06-28 20:19:27.882",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1624911477200_1528697252",
      "id": "20210628-201757_1046810632",
      "dateCreated": "2021-06-28 20:17:57.200",
      "dateStarted": "2021-06-28 20:19:27.907",
      "dateFinished": "2021-06-28 20:19:28.573",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nfrom pyspark.sql import functions as F\njson_file\u003dfinal_df.select(F.to_json(F.struct([final_df[x] for x in final_df.columns])).alias(\"value\"))\njson_file.show()",
      "user": "anonymous",
      "dateUpdated": "2021-06-28 20:21:27.574",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[0;31m\u001b[0m\n\u001b[0;31mNameError\u001b[0mTraceback (most recent call last)\n\u001b[0;32m\u003cipython-input-30-15919d410df6\u003e\u001b[0m in \u001b[0;36m\u003cmodule\u003e\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mpyspark\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msql\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mfunctions\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mF\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----\u003e 2\u001b[0;31m \u001b[0mjson_file\u001b[0m\u001b[0;34m\u003d\u001b[0m\u001b[0mfinal_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mselect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mF\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_json\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mF\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstruct\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mfinal_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mfinal_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0malias\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"value\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mjson_file\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;31mNameError\u001b[0m: name \u0027final_df\u0027 is not defined"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1624911567882_-1261417246",
      "id": "20210628-201927_469903443",
      "dateCreated": "2021-06-28 20:19:27.882",
      "dateStarted": "2021-06-28 20:21:27.596",
      "dateFinished": "2021-06-28 20:21:27.680",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n",
      "user": "anonymous",
      "dateUpdated": "2021-06-28 20:21:27.575",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1624911687574_-649504871",
      "id": "20210628-202127_1127373303",
      "dateCreated": "2021-06-28 20:21:27.574",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Streaming analysis with Kafka, InfluxDB and Grafana",
  "id": "2G8PMERZ8",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "producer:shared_process": [],
    "sh:shared_process": [],
    "jdbc:shared_process": [],
    "spark:shared_process": [],
    "consumer:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}